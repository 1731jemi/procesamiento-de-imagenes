/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/src/DefaultSettings.js":
/*!*************************************!*\
  !*** ./dist/src/DefaultSettings.js ***!
  \*************************************/
/*! exports provided: DefaultSettings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultSettings\", function() { return DefaultSettings; });\nvar DefaultSettings = {\n    SIZE_WIDTH: 463,\n    SIZE_HEIGHT: 279,\n    SMALL_W: 40,\n    SMALL_H: 40\n};\n// export default DefaultSettings;\n\n\n//# sourceURL=webpack:///./dist/src/DefaultSettings.js?");

/***/ }),

/***/ "./dist/src/ImageLocal.js":
/*!********************************!*\
  !*** ./dist/src/ImageLocal.js ***!
  \********************************/
/*! exports provided: ImageLocal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageLocal\", function() { return ImageLocal; });\n/* harmony import */ var _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DefaultSettings.js */ \"./dist/src/DefaultSettings.js\");\n\nvar ImageLocal = /** @class */ (function () {\n    // protected document: HTMLDocument;\n    function ImageLocal(p, ready) {\n        this.img = new Image();\n        this.screen = p;\n        // this.document = d;\n        this.readyToDraw = ready;\n        this.isScaled = false;\n        this.drawSmallImg = this.drawSmallImg.bind(this);\n        this.handleFileSelect = this.handleFileSelect.bind(this);\n        this.onload = this.onload.bind(this);\n    }\n    ImageLocal.prototype.handleFileSelect = function (evt) {\n        var files;\n        if (evt.type === \"drop\") {\n            evt.stopPropagation();\n            evt.preventDefault();\n            files = evt.dataTransfer.files;\n        }\n        if (evt.type === \"change\")\n            files = evt.target.files; // FileList object\n        // files is a FileList of File objects. List some properties.\n        var output = [];\n        //console.log(evt)\n        var f = files[0];\n        output.push('<li><strong>', f.name, '</strong> (', f.type || 'n/a', ') - ', f.size, ' bytes, last modified: ', f.lastModifiedDate.toLocaleDateString(), '</li>');\n        this.img.src = f.name;\n        this.readyToDraw = true;\n        document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';\n        this.onload();\n    };\n    ImageLocal.prototype.drawSmallImg = function (evt) {\n        var xPos = evt.offsetX - 2;\n        var yPos = evt.offsetY - 2;\n        //console.log(xPos, yPos);\n        var pixel = this.screen.getImageData(xPos, yPos, 1, 1);\n        if (this.readyToDraw) {\n            if (this.isScaled) {\n                xPos *= (this.img.width / _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_WIDTH);\n                yPos *= (this.img.height / _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_HEIGHT);\n            }\n            this.screen.clearRect(0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_HEIGHT);\n            this.screen.strokeStyle = \"lightgray\";\n            this.screen.imageSmoothingEnabled = false;\n            this.isScaled ?\n                this.screen.drawImage(this.img, 0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_HEIGHT)\n                : this.screen.drawImage(this.img, 0, 0, this.img.width, this.img.height);\n            this.screen.strokeRect(evt.offsetX + 5, evt.offsetY + 5, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SMALL_W, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SMALL_H);\n            this.screen.drawImage(this.img, Math.floor(xPos - 3), Math.floor(yPos - 3), 5, 5, evt.offsetX + 5, evt.offsetY + 5, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SMALL_W, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SMALL_H);\n            var color = document.getElementById('color');\n            var data = pixel.data;\n            var rgba = 'rgba(' + data[0] + ', ' + data[1] +\n                ', ' + data[2] + ', ' + (data[3] / 255) + ')';\n            color.style.background = rgba;\n            //color.textContent = rgba;\n            document.getElementById('rgb').innerHTML = '<strong>' + rgba + '</strong> ';\n        }\n    };\n    ImageLocal.prototype.getImage = function () {\n        return this.img;\n    };\n    ImageLocal.prototype.getScreen = function () {\n        return this.screen;\n    };\n    ImageLocal.prototype.setScaled = function (v) {\n        this.isScaled = v;\n    };\n    ImageLocal.prototype.onload = function () {\n        this.getScreen().clearRect(0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_HEIGHT);\n        /** SI nuestro canvas es mas pequeÃ±o que la imagen se dibuja a su escala normal,\n         * si es mas grande se dibuja reescalado al ancho de ventana por default  */\n        if (this.getImage().width > _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_WIDTH\n            || this.getImage().height > _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_HEIGHT) {\n            this.getScreen().drawImage(this.getImage(), 0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSettings\"].SIZE_HEIGHT);\n            this.setScaled(true);\n        }\n        else {\n            this.getScreen().drawImage(this.getImage(), 0, 0, this.getImage().width, this.getImage().height);\n            this.setScaled(false);\n        }\n    };\n    return ImageLocal;\n}());\n\n\n\n//# sourceURL=webpack:///./dist/src/ImageLocal.js?");

/***/ }),

/***/ "./dist/src/ImageType.js":
/*!*******************************!*\
  !*** ./dist/src/ImageType.js ***!
  \*******************************/
/*! exports provided: ImageType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageType\", function() { return ImageType; });\nvar ImageType = /** @class */ (function () {\n    /**  Constructor general\n     * @img es un objeto tipo HTMLImageElement del cual se extrae el tamaÃ±o de la imagen\n     * @sc es el elemento Canvas de donde se ha dibujado la img\n    */\n    function ImageType(sc, img, w, h, data) {\n        if (img) {\n            this._width = img.width;\n            this._height = img.height;\n        }\n        else {\n            this._width = w;\n            this._height = h;\n        }\n        this.screenCanvas = sc;\n        this.imageData = sc.getImageData(0, 0, this._width, this._height);\n        this.initArray();\n        if (!data)\n            this.dataToImageArray2D();\n        else\n            this.dataTextToImageArray2D();\n        /*this.dataToImageArray2D = this.dataToImageArray2D.bind(this);\n        this.imageArray2DtoData = this.imageArray2DtoData.bind(this);*/\n    }\n    /** Metodo que devuelve las coordenas del array unidimensional de datos de la imagen */\n    ImageType.prototype.getColorIndicesForCoord = function (x, y) {\n        var red = y * (this._width * 4) + x * 4;\n        return [red, red + 1, red + 2, red + 3];\n    };\n    /** Convierte la data de la imagen a un arreglo tridimensional de manera que que queda asi:\n     * img[canalDeColor][anchoImg][altoImg]\n     */\n    ImageType.prototype.dataToImageArray2D = function () {\n        var position;\n        for (var i = 0; i < this._height; i++) {\n            for (var j = 0; j < this._width; j++) {\n                position = this.getColorIndicesForCoord(j, i);\n                this.arrImage[0][i][j] = this.imageData.data[position[0]];\n                this.arrImage[1][i][j] = this.imageData.data[position[1]];\n                this.arrImage[2][i][j] = this.imageData.data[position[2]];\n            }\n        }\n        //return this.arrImage;\n    };\n    ImageType.prototype.dataTextToImageArray2D = function () {\n        var position;\n        for (var i = 0; i < this._height; i++) {\n            for (var j = 0; j < this._width; j++) {\n                position = this.getColorIndicesForCoord(j, i);\n                this.arrImage[0][i][j] = this.imageData.data[position[3]];\n                //this.arrImage[1][i][j] = this.imageData.data[position[1]];\n                //this.arrImage[2][i][j] = this.imageData.data[position[2]];\n            }\n        }\n        //return this.arrImage;\n    };\n    /** Covierte un arreglo 3d de la imagen a un objeto data, si el argumento existe se dibuja\n     * @sc elemento Canas donde se desa dibujar la data\n     */\n    ImageType.prototype.imageArray2DtoData = function (sc, arrImage) {\n        var position;\n        for (var i = 0; i < this._height; i++) {\n            for (var j = 0; j < this._width; j++) {\n                position = this.getColorIndicesForCoord(j, i);\n                this.imageData.data[position[0]] = arrImage[0][i][j];\n                this.imageData.data[position[1]] = arrImage[1][i][j];\n                this.imageData.data[position[2]] = arrImage[2][i][j];\n            }\n        }\n        sc.putImageData(this.imageData, 0, 0);\n    };\n    /**\n     * Funcion que reescala los valores dew la imagen a el rango de una imagen de 0 - 255,\n     * la imagen puede estar en cualrquier rango de nunmeros reales.\n     * @param arrImage arrar of data\n     * @param alto image heigh\n     * @param ancho image width\n     */\n    ImageType.prototype.imageArray2DtoDataWithResizing = function (sc, arrImage) {\n        //variable donde guardamos la salida\n        //var sal: number[][][] = this.initArray(ancho, alto);\n        var max, min, factor;\n        max = arrImage[0][0][0];\n        min = arrImage[0][0][0];\n        var position;\n        for (var i = 0; i < this._height; i++) {\n            for (var j = 0; j < this._width; j++) {\n                max = Math.max(max, arrImage[0][i][j]);\n                min = Math.min(min, arrImage[0][i][j]);\n            }\n        }\n        factor = 255.0 / (max - min);\n        console.log(factor, max, min);\n        for (var i = 0; i < this._height; i++) {\n            for (var j = 0; j < this._width; j++) {\n                position = this.getColorIndicesForCoord(j, i);\n                this.imageData.data[position[0]] = Math.floor(factor * (arrImage[0][i][j] - min));\n                this.imageData.data[position[1]] = Math.floor(factor * (arrImage[1][i][j] - min));\n                this.imageData.data[position[2]] = Math.floor(factor * (arrImage[2][i][j] - min));\n            }\n        }\n        sc.putImageData(this.imageData, 0, 0);\n    };\n    ImageType.prototype.initArray = function () {\n        this.arrImage = new Array(3);\n        this.arrImage[0] = new Array(this._height);\n        this.arrImage[1] = new Array(this._height);\n        this.arrImage[2] = new Array(this._height);\n        for (var i = 0; i < this._height; i++) {\n            this.arrImage[0][i] = new Array(this._width);\n            this.arrImage[1][i] = new Array(this._width);\n            this.arrImage[2][i] = new Array(this._width);\n        }\n    };\n    ImageType.prototype.getArrayImg = function () {\n        return this.arrImage;\n    };\n    ImageType.prototype.getWidth = function () {\n        return this._width;\n    };\n    ImageType.prototype.getHeight = function () {\n        return this._height;\n    };\n    return ImageType;\n}());\n\n\n\n//# sourceURL=webpack:///./dist/src/ImageType.js?");

/***/ }),

/***/ "./dist/src/MathImg.js":
/*!*****************************!*\
  !*** ./dist/src/MathImg.js ***!
  \*****************************/
/*! exports provided: MathImg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MathImg\", function() { return MathImg; });\n/* harmony import */ var _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @felipeaamacedo/matrix-ts */ \"./node_modules/@felipeaamacedo/matrix-ts/lib/index.js\");\n/* harmony import */ var _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nvar MathImg = /** @class */ (function () {\n    function MathImg() {\n    }\n    MathImg.initArray = function (width, height) {\n        var arrImage = new Array(3);\n        arrImage[0] = new Array(height);\n        arrImage[1] = new Array(height);\n        arrImage[2] = new Array(height);\n        for (var i = 0; i < height; i++) {\n            arrImage[0][i] = new Array(width);\n            arrImage[1][i] = new Array(width);\n            arrImage[2][i] = new Array(width);\n        }\n        return arrImage;\n    };\n    MathImg.initArray2D = function (width, height) {\n        var arrImage = new Array(2);\n        arrImage[0] = new Array(height);\n        arrImage[1] = new Array(height);\n        for (var i = 0; i < height; i++) {\n            arrImage[0][i] = new Array(width);\n            arrImage[1][i] = new Array(width);\n        }\n        return arrImage;\n    };\n    MathImg.toGray = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var prom;\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\n                sal[0][i][j] = prom;\n                sal[1][i][j] = prom;\n                sal[2][i][j] = prom;\n            }\n        }\n        return sal;\n    };\n    MathImg.toNegative = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = Math.pow(arrImage[0][i][j], 2);\n                sal[1][i][j] = Math.pow(arrImage[1][i][j], 2);\n                sal[2][i][j] = Math.pow(arrImage[2][i][j], 2);\n            }\n        }\n        return sal;\n    };\n    MathImg.toRed = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = arrImage[0][i][j];\n                sal[1][i][j] = 0;\n                sal[2][i][j] = 0;\n            }\n        }\n        return sal;\n    };\n    MathImg.toGreen = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = 0;\n                sal[1][i][j] = arrImage[1][i][j];\n                sal[2][i][j] = 0;\n            }\n        }\n        return sal;\n    };\n    MathImg.toBlue = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = 0;\n                sal[1][i][j] = 0;\n                sal[2][i][j] = arrImage[2][i][j];\n            }\n        }\n        return sal;\n    };\n    MathImg.correctionGamma = function (img, factores) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = this.funcionGamma(arrImage[0][i][j], factores[0]);\n                sal[1][i][j] = this.funcionGamma(arrImage[1][i][j], factores[1]);\n                sal[2][i][j] = this.funcionGamma(arrImage[2][i][j], factores[2]);\n            }\n        }\n        return sal;\n    };\n    MathImg.funcionGamma = function (pixel, factor) {\n        return Math.min(255 * Math.pow(pixel / 250, factor), 255);\n    };\n    MathImg.toUmbral = function (img, umbral) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var prom;\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\n                sal[0][i][j] = prom > umbral ? 255 : 0;\n                sal[1][i][j] = prom > umbral ? 255 : 0;\n                sal[2][i][j] = prom > umbral ? 255 : 0;\n            }\n        }\n        return sal;\n    };\n    MathImg.toDesfaceX = function (img, des) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\n        for (var i = 0; i < fila; i++) {\n            for (var j = 0; j < cols; j++) {\n                sal[1][i][j] = arrImage[1][i][j];\n                if ((j - des) >= 0) {\n                    sal[0][i][j] = arrImage[0][i][j - des];\n                }\n                else {\n                    sal[0][i][j] = arrImage[0][i][j];\n                }\n                if ((j + des) < cols) {\n                    sal[2][i][j] = arrImage[2][i][j + des];\n                }\n                else {\n                    sal[2][i][j] = arrImage[2][i][j];\n                }\n            }\n        }\n        return sal;\n    };\n    MathImg.toDesfaceY = function (img, desy) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\n        for (var i = 0; i < fila; i++) {\n            for (var j = 0; j < cols; j++) {\n                sal[1][i][j] = arrImage[1][i][j];\n                if ((i - desy) >= 0) {\n                    sal[0][i][j] = arrImage[0][i - desy][j];\n                }\n                else {\n                    sal[0][i][j] = arrImage[0][i][j];\n                }\n                if ((i + desy) < fila) {\n                    sal[2][i][j] = arrImage[2][i + desy][j];\n                }\n                else {\n                    sal[2][i][j] = arrImage[2][i][j];\n                }\n            }\n        }\n        return sal;\n    };\n    MathImg.toUmbral2limites = function (img, rangos) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var rangoMin = rangos[0];\n        var rangoMax = rangos[1];\n        var prome;\n        for (var i = 0; i < fila; i++) {\n            for (var j = 0; j < cols; j++) {\n                prome = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\n                if (prome <= rangoMin && prome >= rangoMax) {\n                    sal[0][i][j] = 250;\n                }\n                else\n                    sal[0][i][j] = 0;\n                if (prome <= rangoMin && prome >= rangoMax) {\n                    sal[1][i][j] = 250;\n                }\n                else\n                    sal[1][i][j] = 0;\n                if (prome <= rangoMin && prome >= rangoMax) {\n                    sal[2][i][j] = 250;\n                }\n                else\n                    sal[2][i][j] = 0;\n            }\n        }\n        return sal;\n    };\n    MathImg.changeBrightness = function (img, factor) {\n        var arrImage = img.getArrayImg();\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = arrImage[0][i][j] * factor > 255.0 ? 255.0 : arrImage[0][i][j] * factor;\n                sal[1][i][j] = arrImage[1][i][j] * factor > 255.0 ? 255.0 : arrImage[1][i][j] * factor;\n                sal[2][i][j] = arrImage[2][i][j] * factor > 255.0 ? 255.0 : arrImage[2][i][j] * factor;\n            }\n        }\n        return sal;\n    };\n    MathImg.relativeBrightness = function (img) {\n        var arrImage = img.getArrayImg();\n        var sal = this.initArray2D(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                //si el valor del pixel > umbral, entoncesa calculo el brillo\n                //si no el brillo =0\n                sal[0][i][j] = Math.sqrt(Math.pow(arrImage[0][i][j], 2) * 0.299 +\n                    Math.pow(arrImage[1][i][j], 2) * 0.587 +\n                    Math.pow(arrImage[2][i][j], 2) * 0.114) / 100.0;\n                sal[1][i][j] = 'rgb(' + arrImage[0][i][j] + ',' + arrImage[1][i][j] + ',' + arrImage[2][i][j] + ')';\n            }\n        }\n        return sal;\n    };\n    MathImg.colorGradienteX = function (img, factores) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var prom;\n        var r1, r2, b1, b2, g1, g2;\n        var dr, dg, db, dir;\n        r1 = factores[0];\n        g1 = factores[1];\n        b1 = factores[2];\n        r2 = factores[3];\n        g2 = factores[4];\n        b2 = factores[5];\n        dr = (r2 - r1) / img.getWidth();\n        dg = (g2 - g1) / img.getWidth();\n        db = (b2 - b1) / img.getWidth();\n        for (var j = 0; j < img.getWidth(); j++) {\n            for (var i = 0; i < img.getHeight(); i++) {\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\n                sal[0][i][j] = Math.floor(prom * r1 / 255);\n                sal[1][i][j] = Math.floor(prom * g1 / 255);\n                sal[2][i][j] = Math.floor(prom * b1 / 255);\n            }\n            r1 += dr;\n            g1 += dg;\n            b1 += db;\n        }\n        return sal;\n    };\n    MathImg.colorGradientY = function (img, factores) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var prom;\n        var r1, r2, b1, b2, g1, g2;\n        var dr, dg, db;\n        r1 = factores[0];\n        g1 = factores[1];\n        b1 = factores[2];\n        r2 = factores[3];\n        g2 = factores[4];\n        b2 = factores[5];\n        dr = (r2 - r1) / img.getHeight();\n        dg = (g2 - g1) / img.getHeight();\n        db = (b2 - b1) / img.getHeight();\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\n                sal[0][i][j] = Math.floor(prom * r1 / 255);\n                sal[1][i][j] = Math.floor(prom * g1 / 255);\n                sal[2][i][j] = Math.floor(prom * b1 / 255);\n            }\n            r1 += dr;\n            g1 += dg;\n            b1 += db;\n        }\n        return sal;\n    };\n    /**\n     * Metodo para Generar el contraste de una Imagen\n     * @img  ImageType tipo de imagen donde se guarda una matriz tridimencional\n     * @return number[][][] es la imagen de salida con contraste\n     */\n    MathImg.changeContraste = function (img, valor) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        //\n        var cR, cG, cB;\n        var contraste;\n        contraste = (valor + 100) / 100;\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                cR = ((((arrImage[0][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\n                if (cR > 255)\n                    cR = 255;\n                if (cR < 0)\n                    cR = 0;\n                sal[0][i][j] = cR;\n                cG = ((((arrImage[1][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\n                if (cG > 255)\n                    cG = 255;\n                if (cG < 0)\n                    cG = 0;\n                sal[1][i][j] = cG;\n                cB = ((((arrImage[2][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\n                if (cB > 255)\n                    cB = 255;\n                if (cB < 0)\n                    cB = 0;\n                sal[2][i][j] = cB;\n            }\n        }\n        return sal;\n    };\n    MathImg.pow = function (img, power) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = Math.pow(arrImage[0][i][j], power);\n                sal[1][i][j] = Math.pow(arrImage[1][i][j], power);\n                sal[2][i][j] = Math.pow(arrImage[2][i][j], power);\n            }\n        }\n        return sal;\n    };\n    MathImg.toCos = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = Math.cos(arrImage[0][i][j]);\n                sal[1][i][j] = Math.cos(arrImage[1][i][j]);\n                sal[2][i][j] = Math.cos(arrImage[2][i][j]);\n            }\n        }\n        return sal;\n    };\n    MathImg.toSubtract = function (img, escalar) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = arrImage[0][i][j] - escalar;\n                sal[1][i][j] = arrImage[1][i][j] - escalar;\n                sal[2][i][j] = arrImage[2][i][j] - escalar;\n            }\n        }\n        return sal;\n    };\n    MathImg.toMultiplication = function (img, valor) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = valor * arrImage[0][i][j];\n                sal[1][i][j] = valor * arrImage[1][i][j];\n                sal[2][i][j] = valor * arrImage[2][i][j];\n            }\n        }\n        return sal;\n    };\n    MathImg.toSine = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = Math.sin(arrImage[0][i][j]);\n                sal[1][i][j] = Math.sin(arrImage[1][i][j]);\n                sal[2][i][j] = Math.sin(arrImage[2][i][j]);\n            }\n        }\n        return sal;\n    };\n    MathImg.toAdd = function (img, sumar) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = arrImage[0][i][j] + sumar;\n                sal[1][i][j] = arrImage[1][i][j] + sumar;\n                sal[2][i][j] = arrImage[2][i][j] + sumar;\n            }\n        }\n        return sal;\n    };\n    MathImg.toDividir = function (img, dividir) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = arrImage[0][i][j] + dividir;\n                sal[1][i][j] = arrImage[1][i][j] + dividir;\n                sal[2][i][j] = arrImage[2][i][j] + dividir;\n            }\n        }\n        return sal;\n    };\n    MathImg.toSqrt = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = Math.sqrt(arrImage[0][i][j]);\n                sal[1][i][j] = Math.sqrt(arrImage[1][i][j]);\n                sal[2][i][j] = Math.sqrt(arrImage[2][i][j]);\n            }\n        }\n        return sal;\n    };\n    MathImg.toTan = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = Math.tan(arrImage[0][i][j]);\n                sal[1][i][j] = Math.tan(arrImage[1][i][j]);\n                sal[2][i][j] = Math.tan(arrImage[2][i][j]);\n            }\n        }\n        return sal;\n    };\n    MathImg.addImg = function (img, img2) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        var arrImage2 = img2.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = arrImage[0][i][j] + arrImage2[0][i][j];\n                sal[1][i][j] = arrImage[1][i][j] + arrImage2[1][i][j];\n                sal[2][i][j] = arrImage[2][i][j] + arrImage2[2][i][j];\n            }\n        }\n        return sal;\n    };\n    MathImg.hist = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = new Array(3);\n        sal[0] = new Array(256);\n        sal[1] = new Array(256);\n        sal[2] = new Array(256);\n        for (var i = 0; i < 256; i++) {\n            sal[0][i] = 0;\n            sal[1][i] = 0;\n            sal[2][i] = 0;\n        }\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][arrImage[0][i][j]]++;\n                sal[1][arrImage[1][i][j]]++;\n                sal[2][arrImage[2][i][j]]++;\n            }\n        }\n        //console.log(sal[0])\n        return sal;\n    };\n    MathImg.histAcum = function (h) {\n        //variable donde guardamos la salida\n        var hist = new Array(3);\n        hist[0] = new Array(256);\n        hist[1] = new Array(256);\n        hist[2] = new Array(256);\n        hist[0][0] = h[0][0];\n        hist[1][0] = h[1][0];\n        hist[2][0] = h[2][0];\n        for (var i = 1; i < h[0].length; i++) {\n            hist[0][i] = hist[0][i - 1] + h[0][i];\n            hist[1][i] = hist[1][i - 1] + h[1][i];\n            hist[2][i] = hist[2][i - 1] + h[2][i];\n            //if(i==255)\n        }\n        return hist;\n    };\n    MathImg.ecualizar = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var h = this.hist(img);\n        var hA = this.histAcum(h);\n        var fT;\n        fT = new Array(3);\n        fT[0] = new Array(256);\n        fT[2] = new Array(256);\n        fT[1] = new Array(256);\n        for (var i = 0; i < 256; i++) {\n            fT[0][i] = Math.floor(hA[0][i] * 255.0 / hA[0][255]);\n            fT[1][i] = Math.floor(hA[1][i] * 255.0 / hA[1][255]);\n            fT[2][i] = Math.floor(hA[2][i] * 255.0 / hA[2][254]);\n        }\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = fT[0][arrImage[0][i][j]];\n                sal[1][i][j] = fT[1][arrImage[1][i][j]];\n                sal[2][i][j] = fT[2][arrImage[2][i][j]];\n            }\n        }\n        return sal;\n    };\n    MathImg.erosionar = function (img, vec8) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = 0;\n                sal[1][i][j] = 0;\n                sal[2][i][j] = 0;\n            }\n        }\n        var vecinos, valorComp = 4;\n        if (vec8)\n            valorComp = 8;\n        for (var i = 1; i < img.getHeight() - 1; i++) {\n            for (var j = 1; j < img.getWidth() - 1; j++) {\n                vecinos = 0;\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\n                if (vec8) {\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\n                }\n                if (arrImage[0][i][j] && vecinos == valorComp) {\n                    sal[0][i][j] = 255;\n                    sal[1][i][j] = 255;\n                    sal[2][i][j] = 255;\n                }\n            }\n        }\n        return sal;\n    };\n    MathImg.dilatar = function (img, vec8) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                sal[0][i][j] = 0;\n                sal[1][i][j] = 0;\n                sal[2][i][j] = 0;\n            }\n        }\n        var vecinos, valorComp = 4;\n        if (vec8)\n            valorComp = 8;\n        for (var i = 1; i < img.getHeight() - 1; i++) {\n            for (var j = 1; j < img.getWidth() - 1; j++) {\n                vecinos = 0;\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\n                if (vec8) {\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\n                }\n                if (arrImage[0][i][j] && vecinos) {\n                    sal[0][i][j] = 255;\n                    sal[1][i][j] = 255;\n                    sal[2][i][j] = 255;\n                }\n            }\n        }\n        return sal;\n    };\n    MathImg.apertura = function (img, vec8) {\n        var arrImage = this.erosionar(img, vec8);\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var vecinos, valorComp = 4;\n        if (vec8)\n            valorComp = 8;\n        for (var i = 1; i < img.getHeight() - 1; i++) {\n            for (var j = 1; j < img.getWidth() - 1; j++) {\n                vecinos = 0;\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\n                if (vec8) {\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\n                }\n                if (arrImage[0][i][j] && vecinos) {\n                    sal[0][i][j] = 255;\n                    sal[1][i][j] = 255;\n                    sal[2][i][j] = 255;\n                }\n            }\n        }\n        return sal;\n    };\n    MathImg.cierre = function (img, vec8) {\n        var arrImage = this.dilatar(img, vec8);\n        var vecinos, valorComp = 4;\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        if (vec8)\n            valorComp = 8;\n        for (var i = 1; i < img.getHeight() - 1; i++) {\n            for (var j = 1; j < img.getWidth() - 1; j++) {\n                vecinos = 0;\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\n                if (vec8) {\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\n                }\n                if (arrImage[0][i][j] && vecinos == valorComp) {\n                    sal[0][i][j] = 255;\n                    sal[1][i][j] = 255;\n                    sal[2][i][j] = 255;\n                }\n            }\n        }\n        return sal;\n    };\n    MathImg.fromRGBtoHSI = function (img) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var hue;\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                arrImage[0][i][j] /= 255.0;\n                arrImage[1][i][j] /= 255.0;\n                arrImage[2][i][j] /= 255.0;\n                hue = 180 / Math.PI * Math.acos(0.5 * ((arrImage[0][i][j] - arrImage[1][i][j]) + (arrImage[0][i][j] - arrImage[2][i][j])) /\n                    Math.sqrt(Math.pow(arrImage[0][i][j] - arrImage[1][i][j], 2) + (arrImage[0][i][j] - arrImage[2][i][j]) * (arrImage[1][i][j] - arrImage[2][i][j])));\n                sal[0][i][j] = arrImage[2][i][j] > arrImage[1][i][j] ? 360 - hue : hue;\n                sal[1][i][j] = 1 - (3 * Math.min(arrImage[0][i][j], arrImage[1][i][j], arrImage[2][i][j])) / (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]);\n                sal[2][i][j] = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\n            }\n        }\n        return sal;\n    };\n    MathImg.fromHSItoRGB = function (arrImage) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var width;\n        var height;\n        height = arrImage[0].length;\n        width = arrImage[0][0].length;\n        //variable donde guardamos la salida\n        var sal = this.initArray(width, height);\n        var hue;\n        for (var i = 0; i < height; i++) {\n            for (var j = 0; j < width; j++) {\n                //H de 0 - 120\n                if (arrImage[0][i][j] >= 0 && arrImage[0][i][j] < 120) {\n                    sal[0][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j]))) /\n                        (Math.cos(this.toRad(60 - arrImage[0][i][j]))));\n                    sal[2][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\n                    sal[1][i][j] = 3 * arrImage[2][i][j] - sal[0][i][j] - sal[2][i][j];\n                }\n                else if (arrImage[0][i][j] >= 120 && arrImage[0][i][j] < 240) {\n                    sal[0][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\n                    sal[1][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j] - 120))) /\n                        (Math.cos(this.toRad(180 - arrImage[0][i][j]))));\n                    sal[2][i][j] = 3 * arrImage[2][i][j] - sal[0][i][j] - sal[1][i][j];\n                }\n                else if (arrImage[0][i][j] >= 240 && arrImage[0][i][j] < 360) {\n                    sal[1][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\n                    sal[2][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j] - 240))) /\n                        (Math.cos(this.toRad(300 - arrImage[0][i][j]))));\n                    sal[0][i][j] = 3 * arrImage[2][i][j] - sal[1][i][j] - sal[2][i][j];\n                }\n                sal[0][i][j] *= 255.0;\n                sal[1][i][j] *= 255.0;\n                sal[2][i][j] *= 255.0;\n            }\n        }\n        return sal;\n    };\n    MathImg.toRad = function (grados) {\n        return (grados * Math.PI / 180);\n    };\n    MathImg.falseColorByHue = function (arrImage, hue, newHue) {\n        var width;\n        var height;\n        height = arrImage[0].length;\n        width = arrImage[0][0].length;\n        //variable donde guardamos la salida\n        var sal = this.initArray(width, height);\n        var range = 25;\n        for (var i = 0; i < height; i++) {\n            for (var j = 0; j < width; j++) {\n                //si hue es menor a cero estamos en el rango de 360 bajos, por lo que hay que revisar esos valores\n                if ((hue - range) < 0) {\n                    if (Math.abs(hue - arrImage[0][i][j]) < range) {\n                        sal[0][i][j] = newHue;\n                    }\n                    else if ((360 + hue - arrImage[0][i][j]) < range) {\n                        sal[0][i][j] = newHue;\n                    }\n                    else {\n                        sal[0][i][j] = arrImage[0][i][j];\n                    }\n                }\n                else if ((hue + range) > 360) {\n                    if (Math.abs(hue - arrImage[0][i][j]) < range) {\n                        sal[0][i][j] = newHue;\n                    }\n                    else if ((-360 + hue - arrImage[0][i][j]) < range) {\n                        sal[0][i][j] = newHue;\n                    }\n                    else {\n                        sal[0][i][j] = arrImage[0][i][j];\n                    }\n                } // si no se rebasa del cero\n                else if (Math.abs(hue - arrImage[0][i][j]) < range) {\n                    sal[0][i][j] = newHue;\n                } // si no se rebasa del rango\n                else {\n                    sal[0][i][j] = arrImage[0][i][j];\n                }\n                sal[1][i][j] = arrImage[1][i][j];\n                sal[2][i][j] = arrImage[2][i][j];\n            }\n        }\n        return sal;\n    };\n    MathImg.conX = function (i, j, cs) {\n        //let res = cs.data[0][0] * j + cs.data[1][0] * i + cs.data[3][0] * i * j + cs.data[3][0];\n        // console.log(i,j);\n        // console.log(cs.data[0][0], cs.data[1][0], cs.data[2][0],cs.data[3][0] );\n        //console.log(cs.data[0][1]* i );\n        return Math.floor(cs.data[0][0] * j + cs.data[1][0] * i + cs.data[2][0] * i * j + cs.data[3][0]);\n    };\n    /*public static conY(i:number,j : number, cs: Matrix){\n    return Math.floor(cs.data[1][0] * j + cs.data[1][1] * i + cs.data[1][2]*i*j + cs.data[1][3]);\n  }*/\n    //aqui va ir el codigo de la trasnformacion bilineal  \n    MathImg.bilineal = function (img, puntos_a) {\n        //variable que guarda el arreglo 3d de la imagen de color\n        var arrImage = img.getArrayImg();\n        //variable donde guardamos la salida\n        var sal = this.initArray(img.getWidth(), img.getHeight());\n        var x1a = 0, y1a = 0, x2a = img.getWidth() - 1, y2a = 0, x3a = img.getWidth() - 1, y3a = img.getHeight() - 1, x4a = 0, y4a = img.getHeight() - 1;\n        var x1r = puntos_a[0][0], y1r = puntos_a[1][0], x2r = puntos_a[0][1], y2r = puntos_a[1][0], x3r = puntos_a[0][2], y3r = puntos_a[1][2], x4r = puntos_a[0][3], y4r = puntos_a[1][3];\n        var matA = new _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](4, 4);\n        matA.data = [\n            [x1a, y1a, x1a * y1a, 1],\n            [x2a, y2a, x2a * y2a, 1],\n            [x3a, y3a, x3a * y3a, 1],\n            [x4a, y4a, x4a * y4a, 1]\n        ];\n        var vecX = new _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](4, 1);\n        vecX.data = [\n            [x1r],\n            [x2r],\n            [x3r],\n            [x4r]\n        ];\n        var vecY = new _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](4, 1);\n        vecY.data = [\n            [y1r],\n            [y2r],\n            [y3r],\n            [y4r]\n        ];\n        var C1 = Object(_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(Object(_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__[\"inv\"])(matA), vecX);\n        var C2 = Object(_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(Object(_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__[\"inv\"])(matA), vecY);\n        var posi, posj;\n        //float coef[][] = matrizDeC(xd0, yd0, xd1, yd1, xd2, yd2, xSI,ySI, xSD, ySD, xII, yII );\n        for (var i = 0; i < img.getHeight(); i++) {\n            for (var j = 0; j < img.getWidth(); j++) {\n                posj = this.conX(i, j, C1);\n                posi = this.conX(i, j, C2);\n                if ((posj >= 0 && posj <= img.getWidth() - 1) && (posi >= 0 && posi <= img.getHeight() - 1)) {\n                    sal[0][i][j] = arrImage[0][posi][posj];\n                    sal[1][i][j] = arrImage[1][posi][posj];\n                    sal[2][i][j] = arrImage[2][posi][posj];\n                }\n            }\n        }\n        console.log(sal);\n        return sal;\n    };\n    return MathImg;\n}());\n\n\n\n//# sourceURL=webpack:///./dist/src/MathImg.js?");

/***/ }),

/***/ "./dist/src/canvasLocal.js":
/*!*********************************!*\
  !*** ./dist/src/canvasLocal.js ***!
  \*********************************/
/*! exports provided: CanvasLocal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CanvasLocal\", function() { return CanvasLocal; });\nvar CanvasLocal = /** @class */ (function () {\n    function CanvasLocal(g, canvas, h) {\n        this.graphics = g;\n        this.rWidth = 12;\n        this.rHeight = 12;\n        this.maxX = canvas.width - 1;\n        this.maxY = canvas.height - 1;\n        this.pixelSize = Math.max(this.rWidth / this.maxX, this.rHeight / this.maxY);\n        this.centerX = this.maxX / 12;\n        this.centerY = this.maxY / 12 * 10;\n        this.hist = h;\n    }\n    CanvasLocal.prototype.iX = function (x) { return Math.round(this.centerX + x / this.pixelSize); };\n    CanvasLocal.prototype.iY = function (y) { return Math.round(this.centerY - y / this.pixelSize); };\n    CanvasLocal.prototype.drawLine = function (x1, y1, x2, y2) {\n        this.graphics.beginPath();\n        this.graphics.moveTo(x1, y1);\n        this.graphics.lineTo(x2, y2);\n        this.graphics.closePath();\n        this.graphics.stroke();\n    };\n    CanvasLocal.prototype.drawRmboide = function (x1, y1, x2, y2, x3, y3, x4, y4, color) {\n        // Color de relleno\n        this.graphics.fillStyle = color;\n        // Comenzamos la ruta de dibujo, o path\n        this.graphics.beginPath();\n        // Mover a la esquina superior izquierda\n        this.graphics.moveTo(x1, y1);\n        // Dibujar la lÃ­nea hacia la derecha\n        this.graphics.lineTo(x2, y2);\n        // Ahora la que va hacia abajo\n        this.graphics.lineTo(x3, y3); // A 80 porque esa es la altura\n        // La que va hacia la izquierda\n        this.graphics.lineTo(x4, y4);\n        // Y dejamos que la Ãºltima lÃ­nea la dibuje JS\n        this.graphics.closePath();\n        // Hacemos que se dibuje\n        this.graphics.stroke();\n        // Lo rellenamos\n        this.graphics.fill();\n    };\n    CanvasLocal.prototype.fx = function (x) {\n        return Math.sin(x * 2.5);\n    };\n    CanvasLocal.prototype.paint = function () {\n        var max = this.maxHist();\n        var factor = 6 / max;\n        this.drawLine(this.iX(0), this.iY(0), this.iX(10), this.iY(0));\n        this.drawLine(this.iX(0), this.iY(0), this.iX(0), this.iY(8));\n        this.graphics.strokeStyle = 'red';\n        for (var i = 0; i < 254; i++) {\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[0][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[0][i + 1] * factor));\n        }\n        this.graphics.strokeStyle = 'green';\n        for (var i = 0; i < 254; i++) {\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[1][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[1][i + 1] * factor));\n        }\n        this.graphics.strokeStyle = 'blue';\n        for (var i = 0; i < 254; i++) {\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[2][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[2][i + 1] * factor));\n        }\n        /*this.graphics.strokeStyle = 'black';\n        this.drawLine(this.iX(0), this.iY(0), this.iX(8), this.iY(0));\n        this.drawLine(this.iX(0), this.iY(0), this.iX(0), this.iY(6));\n        \n       */\n    };\n    CanvasLocal.prototype.maxHist = function () {\n        var max = this.hist[0][0];\n        for (var i = 0; i < 255; i++) {\n            if (this.hist[0][i] > max)\n                max = this.hist[0][i];\n        }\n        return max;\n    };\n    return CanvasLocal;\n}());\n\n\n\n//# sourceURL=webpack:///./dist/src/canvasLocal.js?");

/***/ }),

/***/ "./dist/src/index.js":
/*!***************************!*\
  !*** ./dist/src/index.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ImageLocal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ImageLocal.js */ \"./dist/src/ImageLocal.js\");\n/* harmony import */ var _ImageType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageType.js */ \"./dist/src/ImageType.js\");\n/* harmony import */ var _MathImg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MathImg.js */ \"./dist/src/MathImg.js\");\n/* harmony import */ var _particle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./particle.js */ \"./dist/src/particle.js\");\n/* harmony import */ var _canvasLocal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./canvasLocal.js */ \"./dist/src/canvasLocal.js\");\n\n\n\n\n\n\nvar lienzo1;\nvar lienzo2;\nvar lienzo4;\nvar pantalla1;\nvar pantalla2;\nvar pantalla4;\n/* Este evento controla la forma de abrir un archivo mediante el evento de arrastrar y soltar */\nfunction handleDragOver(evt) {\n    evt.stopPropagation();\n    evt.preventDefault(); //que no se abra en otra ventana sola la imagen\n    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n}\n/** Variables que controla el canvas de la imagen, el primero\n * posteriormemte se volveran arreglos cuando ya controlemos las seis ventanas de nuestro frame\n*/\nlienzo1 = document.getElementById('img1');\npantalla1 = lienzo1.getContext(\"2d\");\nlienzo2 = document.getElementById('img2');\npantalla2 = lienzo2.getContext(\"2d\");\nlienzo4 = document.getElementById('img4');\npantalla4 = lienzo4.getContext(\"2d\");\nvar dropZone = lienzo1; //document.getElementById('img1');\nvar imgLocal = new _ImageLocal_js__WEBPACK_IMPORTED_MODULE_0__[\"ImageLocal\"](pantalla1);\nimgLocal.getImage().onload = imgLocal.onload;\nvar imgLocal4 = new _ImageLocal_js__WEBPACK_IMPORTED_MODULE_0__[\"ImageLocal\"](pantalla4);\nimgLocal4.getImage().onload = imgLocal4.onload;\nfunction convertirAGris(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toGray(imagenSal));\n}\nfunction convertirANegativo(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toNegative(imagenSal));\n}\nfunction convertirARojo(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toRed(imagenSal));\n}\nfunction convertirAVerde(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toGreen(imagenSal));\n}\nfunction convertirAAzul(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toBlue(imagenSal));\n}\nfunction correccionGamma(evt) {\n    var args = prompt('Ingresa los factores de correccion Gamma, separados por coma');\n    var factores = args.split(',').map(function (elem) { return parseFloat(elem); });\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].correctionGamma(imagenSal, factores));\n}\nfunction umbralizado(evt) {\n    var args = prompt('Ingresa el valor del umbral');\n    var umbral = parseFloat(args);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toUmbral(imagenSal, umbral));\n}\nfunction desfaseX(evt) {\n    var args = prompt('Ingresa el valor del desfase en X');\n    var des = parseFloat(args);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toDesfaceX(imagenSal, des));\n}\nfunction desfaseY(evt) {\n    var args = prompt('Ingresa el valor del desfase en Y');\n    var desy = parseFloat(args);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toDesfaceX(imagenSal, desy));\n}\nfunction umbral2limites(evt) {\n    var args = prompt('Ingresa el rango minimo y el maximo separado por comas');\n    var rangos = args.split(',').map(function (elem) { return parseFloat(elem); });\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toUmbral2limites(imagenSal, rangos));\n}\nfunction changeBrightness(evt) {\n    var factor = prompt(\"Ingresa un valor en el rango de 0-2, como un porcentaje\");\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].changeBrightness(imagenSal, parseFloat(factor)));\n}\nfunction colorGradienteX(evt) {\n    var args = prompt(\"Ingresa color de Inicio y final en formato r,g,b, separados por coma\");\n    var factores = args.split(',').map(function (elem) { return parseFloat(elem); });\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].colorGradienteX(imagenSal, factores));\n}\nfunction colorGradienteY(evt) {\n    var args = prompt(\"Ingresa color de Inicio y final en formato r,g,b, separados por coma\");\n    var factores = args.split(',').map(function (elem) { return parseFloat(elem); });\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].colorGradientY(imagenSal, factores));\n}\nfunction opchangeContraste(evt) {\n    var argss = prompt('Ingresa un valor entre el rango de -100 a 100');\n    var valor = parseFloat(argss);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].changeContraste(imagenSal, valor));\n}\nfunction opgetPow(evt) {\n    var argss = prompt('Ingresa un numero ( potencia )');\n    var valor = parseFloat(argss);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].pow(imagenSal, valor));\n}\nfunction coseno(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toCos(imagenSal));\n}\nfunction multiplicacion(evt) {\n    var argss = prompt('Ingresa un numero real');\n    var valor = parseFloat(argss);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toMultiplication(imagenSal, valor));\n}\nfunction subtract(evt) {\n    var argss = prompt('Ingresa un numero real');\n    var restar = parseFloat(argss);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toSubtract(imagenSal, restar));\n}\nfunction funcionSine(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toSine(imagenSal));\n}\nfunction add(evt) {\n    var argss = prompt('Ingresa un numero real');\n    var sumar = parseFloat(argss);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toAdd(imagenSal, sumar));\n}\nfunction sqrt(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toSqrt(imagenSal));\n}\nfunction div(evt) {\n    var argss = prompt('Ingresa un numero real');\n    var dividir = parseFloat(argss);\n    if (dividir == 0) {\n        var argss = prompt('Ingresa un valor diferente de 0');\n        var dividir = parseFloat(argss);\n        var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n        imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toDividir(imagenSal, dividir));\n    }\n    else {\n        var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n        imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toDividir(imagenSal, dividir));\n    }\n}\nfunction tan(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].toTan(imagenSal));\n}\nfunction sumaImg(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    var imagen2 = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla4, imgLocal4.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].addImg(imagenSal, imagen2));\n}\n//variables adicionales para el efecto rain\nvar ctx = pantalla2;\nvar w;\nvar h;\nvar numberOfParticles = 5000;\nvar particlesArray;\nparticlesArray = new Array(0);\nvar imagenSal;\nfunction init() {\n    //init\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    var tmp = _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].relativeBrightness(imagenSal);\n    w = imagenSal.getWidth();\n    h = imagenSal.getHeight();\n    for (var i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new _particle_js__WEBPACK_IMPORTED_MODULE_3__[\"Particle\"](w, h, ctx, tmp));\n    }\n}\nfunction animate() {\n    ctx.drawImage(imgLocal.getImage(), 0, 0, w, h);\n    ctx.globalAlpha = 0.25;\n    ctx.fillStyle = 'rgb(0,0,0)';\n    ctx.fillRect(0, 0, w, h);\n    for (var i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update();\n        particlesArray[i].draw();\n    }\n    requestAnimationFrame(animate);\n}\nfunction animate2() {\n    ctx.globalAlpha = 0.25;\n    ctx.fillStyle = 'rgb(0,0,0)';\n    ctx.fillRect(0, 0, w, h);\n    for (var i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update();\n        ctx.globalAlpha = particlesArray[i].getSpeed() * 0.5;\n        particlesArray[i].draw();\n    }\n    requestAnimationFrame(animate2);\n}\nfunction rain(evt) {\n    init();\n    animate();\n}\nfunction rain2(evt) {\n    init();\n    animate2();\n}\n//codigo para efecto de particulas\nvar particleArray;\nvar mouse = {\n    x: null,\n    y: null,\n    radius: 150\n};\nfunction handleMouse(e) {\n    mouse.x = e.x; // - canvasPosition.left;\n    mouse.y = e.y; // - canvasPosition.top;\n    //console.log(mouse.x, mouse.y)\n}\nfunction textEfects(evt) {\n    var args = prompt(\"Ingresa texto, tamaÃ±o de texto y coord x y y, separados por coma:\");\n    var factores = args.split(','); //.map(elem => parseInt(elem));\n    pantalla1.font = 'bold  ' + factores[1] + 'px Verdana';\n    //let cadena = \n    pantalla1.fillText(factores[0], parseInt(factores[2]), parseInt(factores[3]));\n    imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, null, 300, 300, true);\n    initParticles();\n    animateParticles();\n}\nfunction initParticles() {\n    particleArray = [];\n    var arrImage = imagenSal.getArrayImg();\n    for (var i = 0; i < 300; i++) {\n        for (var j = 0; j < 300; j++) {\n            if (arrImage[0][i][j] > 128) {\n                particleArray.push(new _particle_js__WEBPACK_IMPORTED_MODULE_3__[\"ParticleText\"](j, i, pantalla1));\n            }\n        }\n    }\n}\nfunction animateParticles() {\n    pantalla1.clearRect(0, 0, 300, 300);\n    for (var i = 0; i < particleArray.length; i++) {\n        particleArray[i].update(mouse);\n        particleArray[i].draw();\n    }\n    requestAnimationFrame(animateParticles);\n}\n//seccion de histogramas  \nfunction histogramas(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    var canvas1 = lienzo2;\n    var graphics1 = pantalla2;\n    var canvas2 = lienzo4;\n    var graphics2 = pantalla4;\n    var hist = _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].hist(imagenSal);\n    var miCanvas1 = new _canvasLocal_js__WEBPACK_IMPORTED_MODULE_4__[\"CanvasLocal\"](graphics1, canvas1, hist);\n    miCanvas1.paint();\n    var histAc = _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].histAcum(hist);\n    var miCanvas2 = new _canvasLocal_js__WEBPACK_IMPORTED_MODULE_4__[\"CanvasLocal\"](graphics2, canvas2, histAc);\n    miCanvas2.paint();\n}\nfunction ecualizado(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].ecualizar(imagenSal));\n}\nfunction erosionarImg(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].erosionar(imagenSal, true));\n}\nfunction dilatarImg(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].dilatar(imagenSal, true));\n}\nfunction aperturaImg(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].apertura(imagenSal, true));\n}\nfunction cierreImg(evt) {\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].cierre(imagenSal, true));\n}\nfunction opchangeFalsoColor(evt) {\n    var argss = prompt('Ingresa un valor de color Hue');\n    var hue = parseFloat(argss);\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].fromHSItoRGB(_MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].falseColorByHue(_MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].fromRGBtoHSI(imagenSal), hue, 210)));\n}\nlienzo1.addEventListener('mousemove', handleMouse);\nlienzo1.addEventListener(\"mousemove\", imgLocal.drawSmallImg);\ndocument.getElementById('files').addEventListener('change', imgLocal.handleFileSelect, false);\ndocument.getElementById('files2').addEventListener('change', imgLocal4.handleFileSelect, false);\ndropZone.addEventListener('dragover', handleDragOver, false);\ndropZone.addEventListener('drop', imgLocal.handleFileSelect, false);\n//menu op basicas\ndocument.getElementById(\"op-gris\").addEventListener('click', convertirAGris, false);\ndocument.getElementById(\"op-negativo\").addEventListener('click', convertirANegativo, false);\ndocument.getElementById(\"op-rojo\").addEventListener('click', convertirARojo, false);\ndocument.getElementById(\"op-verde\").addEventListener('click', convertirAVerde, false);\ndocument.getElementById(\"op-azul\").addEventListener('click', convertirAAzul, false);\ndocument.getElementById(\"op-gamma\").addEventListener('click', correccionGamma, false);\ndocument.getElementById(\"op-umbral1\").addEventListener('click', umbralizado, false);\ndocument.getElementById(\"op-umbral-2-limites\").addEventListener('click', umbral2limites, false);\ndocument.getElementById(\"op-desfaseX\").addEventListener('click', desfaseX, false);\ndocument.getElementById(\"op-desfaseY\").addEventListener('click', desfaseY, false);\n//menu op. edicion\ndocument.getElementById(\"op-brillo\").addEventListener('click', changeBrightness, false);\ndocument.getElementById(\"op-gradienteX\").addEventListener('click', colorGradienteX, false);\ndocument.getElementById(\"op-gradienteY\").addEventListener('click', colorGradienteY, false);\ndocument.getElementById(\"op-contraste\").addEventListener('click', opchangeContraste, false);\ndocument.getElementById(\"op-falsocolor\").addEventListener('click', opchangeFalsoColor, false);\n//op matematicas\ndocument.getElementById(\"op-pow\").addEventListener('click', opgetPow, false);\ndocument.getElementById(\"op-sqrt\").addEventListener('click', sqrt, false);\ndocument.getElementById(\"op-sine\").addEventListener('click', funcionSine, false);\ndocument.getElementById(\"op-cos\").addEventListener('click', coseno, false);\ndocument.getElementById(\"op-tan\").addEventListener('click', tan, false);\ndocument.getElementById(\"op-add\").addEventListener('click', add, false);\ndocument.getElementById(\"op-subtract\").addEventListener('click', subtract, false);\ndocument.getElementById(\"op-multiplicacion\").addEventListener('click', multiplicacion, false);\ndocument.getElementById(\"op-div\").addEventListener('click', div, false);\n//op con imagenes compuestas\ndocument.getElementById(\"op-addimg\").addEventListener('click', sumaImg, false);\n//op con efectos\ndocument.getElementById(\"op-rain\").addEventListener('click', rain, false);\ndocument.getElementById(\"op-rain2\").addEventListener('click', rain2, false);\n//op con texto.\ndocument.getElementById(\"op-text\").addEventListener('click', textEfects, false);\n//histogramas\ndocument.getElementById(\"op-hist\").addEventListener('click', histogramas, false);\ndocument.getElementById(\"op-ecualizar\").addEventListener('click', ecualizado, false);\n//mortfologia\ndocument.getElementById(\"op-eros\").addEventListener('click', erosionarImg, false);\ndocument.getElementById(\"op-dila\").addEventListener('click', dilatarImg, false);\ndocument.getElementById(\"op-aper\").addEventListener('click', aperturaImg, false);\ndocument.getElementById(\"op-cier\").addEventListener('click', cierreImg, false);\nfunction bilinealImg(evt) {\n    var data = [[55, 394, 460, 1],\n        [2, 2, 275, 275]];\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__[\"ImageType\"](pantalla1, imgLocal.getImage());\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__[\"MathImg\"].bilineal(imagenSal, data));\n}\n//geometrica\ndocument.getElementById(\"op-bilineal\").addEventListener('click', bilinealImg, false);\n\n\n//# sourceURL=webpack:///./dist/src/index.js?");

/***/ }),

/***/ "./dist/src/particle.js":
/*!******************************!*\
  !*** ./dist/src/particle.js ***!
  \******************************/
/*! exports provided: Particle, ParticleText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Particle\", function() { return Particle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParticleText\", function() { return ParticleText; });\nvar Particle = /** @class */ (function () {\n    function Particle(width, height, screenCanvas, mapImg) {\n        this.width = width;\n        this.height = height;\n        this.ctx = screenCanvas;\n        this.x = Math.random() * width;\n        this.y = 0;\n        this.speed = 0;\n        this.velocity = Math.random() * 2.5;\n        this.size = Math.random() * 1.5 + 1;\n        this._2PI = Math.PI * 2;\n        this.position1 = Math.floor(this.y);\n        this.position2 = Math.floor(this.x);\n        this.mappedImage = mapImg;\n    }\n    Particle.prototype.update = function () {\n        this.position1 = Math.floor(this.y);\n        this.position2 = Math.floor(this.x);\n        var movement = 0;\n        if (this.y < this.height) {\n            this.speed = this.mappedImage[0][this.position1][this.position2];\n            movement = (2.5 - this.speed) + this.velocity;\n        }\n        this.y += movement;\n        if (this.y >= this.height) {\n            this.y = 0;\n            this.x = Math.random() * this.width;\n        }\n    };\n    Particle.prototype.draw = function () {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.mappedImage[1][this.position1][this.position2];\n        this.ctx.arc(this.x, this.y, this.size, 0, this._2PI);\n        this.ctx.fill();\n    };\n    Particle.prototype.getSpeed = function () {\n        return this.speed;\n    };\n    return Particle;\n}());\n\nvar ParticleText = /** @class */ (function () {\n    function ParticleText(x, y, screenCanvas, mapImg) {\n        this.ctx = screenCanvas;\n        this.x = x; // + 200;\n        this.y = y; // - 100,\n        this.size = 2;\n        this.baseX = this.x;\n        this.baseY = this.y;\n        this.density = ((Math.random() * 30) + 1);\n        this._2PI = Math.PI * 2;\n        this.mappedImage = mapImg;\n    }\n    ParticleText.prototype.update = function (mouse) {\n        var dx = mouse.x - this.x;\n        var dy = mouse.y - this.y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        var forceDirectionX = dx / distance;\n        var forceDirectionY = dy / distance;\n        var maxDistance = mouse.radius;\n        var force = (maxDistance - distance) / maxDistance;\n        var directionX = (forceDirectionX * force * this.density);\n        var directionY = (forceDirectionY * force * this.density);\n        if (distance < mouse.radius) {\n            this.x -= directionX;\n            this.y -= directionY;\n        }\n        else {\n            if (this.x !== this.baseX) {\n                var dx_1 = this.x - this.baseX;\n                this.x -= dx_1 / 5;\n            }\n            if (this.y !== this.baseY) {\n                var dy_1 = this.y - this.baseY;\n                this.y -= dy_1 / 5;\n            }\n        }\n    };\n    ParticleText.prototype.draw = function () {\n        this.ctx.fillStyle = 'red';\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, this.size, 0, this._2PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n    };\n    return ParticleText;\n}());\n\n\n\n//# sourceURL=webpack:///./dist/src/particle.js?");

/***/ }),

/***/ "./node_modules/@felipeaamacedo/matrix-ts/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@felipeaamacedo/matrix-ts/lib/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(__webpack_require__(/*! ./matrix-ts */ \"./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@felipeaamacedo/matrix-ts/lib/index.js?");

/***/ }),

/***/ "./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.multiplyRowByConstant = exports.swapRow = exports.augmentedMatrix = exports.copyMatrix = exports.inv = exports.GaussEli = exports.MatIdentity = exports.ArraySubtr = exports.MatSubtr = exports.MatSum = exports.multiply = exports.Matrix = void 0;\nclass Matrix {\n    constructor(_row, _col) {\n        this._row = _row;\n        this._col = _col;\n        this._data = new Array();\n        //CREATING THE MATRIX\n        for (let i = 0; i < this._row; i++) {\n            this._data.push(Array(this._col));\n        }\n    }\n    get row() {\n        return this._row;\n    }\n    get col() {\n        return this._col;\n    }\n    get data() {\n        return this._data;\n    }\n    set data(A) {\n        for (let j = 0; j < this.row; j++) {\n            if ((A.length !== this.row) && (A[j].length !== this.col)) {\n                throw new Error('Number of rows or colums are different from the specified in the matrix, please check it');\n            }\n            else {\n                this._data = A;\n            }\n        }\n    }\n    /**\n    * Gives the size of a matrix in form of number[]\n    */\n    size() {\n        return [this.row, this.col];\n    }\n    /**\n    * Calculates the determinant of the matrix.\n    */\n    determinant() {\n        if (this.row !== this._col) {\n            throw new Error('The matrix is not a square');\n        }\n        else {\n            if (this.row == 2) {\n                return this.data[0][0] * this.data[1][1] - this.data[0][1] * this.data[1][0];\n            }\n            else {\n                let iCof = 1;\n                let sum = 0;\n                for (let j = 0; j < this._col; j++) {\n                    sum = sum + this.data[iCof - 1][j] * Math.pow((-1), (iCof + j + 1)) * this.sub_matrix(iCof, j + 1).determinant();\n                }\n                return sum;\n            }\n        }\n    }\n    /**\n    * Calculates the sub_matrix used in the determinant calculation\n    */\n    sub_matrix(del_row, del_col) {\n        del_col = del_col - 1;\n        del_row = del_row - 1;\n        let subMatrix = new Matrix(this.row - 1, this._col - 1);\n        let flagRow = false;\n        let flagCol = false;\n        for (let j = 0; j < this._col; j++) {\n            flagRow = false;\n            if ((j == del_col) && (del_col < this._col)) {\n                j++;\n                flagCol = true;\n            }\n            for (let i = 0; i < this.row; i++) {\n                if ((i == del_row) && (del_row < this.row)) {\n                    i++;\n                    flagRow = true;\n                }\n                if ((flagCol == true) && (flagRow == false)) {\n                    subMatrix.data[i][j - 1] = this.data[i][j];\n                }\n                else if ((flagCol == false) && (flagRow == true)) {\n                    subMatrix.data[i - 1][j] = this.data[i][j];\n                }\n                else if ((flagCol == true) && (flagRow == true)) {\n                    subMatrix.data[i - 1][j - 1] = this.data[i][j];\n                }\n                else {\n                    subMatrix.data[i][j] = this.data[i][j];\n                }\n            }\n        }\n        return subMatrix;\n    }\n}\nexports.Matrix = Matrix;\n/**\n* Multiply two given matrices, MatA[i][j] and MatB[j][p]\n* @param MatA Input MatA.\n* @param MatB Input MatB.\n*/\nfunction multiply(MatA, MatB) {\n    let MatA_Row = MatA.row;\n    let MatA_Col = MatA.col;\n    let MatB_Row = MatB.row;\n    let MatB_Col = MatB.col;\n    if (MatA_Col !== MatB_Row) {\n        throw new Error('Number of cols in Mat1 is different from Mat2 rows');\n    }\n    let MatC = new Matrix(MatA_Row, MatB_Col);\n    for (let i = 0; i < MatA_Row; i++) {\n        for (let j = 0; j < MatB_Col; j++) {\n            let sum = 0;\n            for (let k = 0; k < MatB_Row; k++) {\n                sum = sum + MatA.data[i][k] * MatB.data[k][j];\n            }\n            MatC.data[i][j] = sum;\n        }\n    }\n    return MatC;\n}\nexports.multiply = multiply;\n/**\n* Calculates the transpose of a five matrix.\n* @param M Input matrix M to be transposed.\n* /\nexport function transpose(M:Matrix):Matrix{\n    let Mtransp:Matrix= new Matrix(M.row, M.col)\n    for(let i=0; i<M.row;i++){\n        for(let j=0;j<M.col;j++){\n            Mtransp.data[j][i] = M.data[i][j]\n        }\n    }\n\n    return Mtransp\n}\n\n/**\n* Sum two matrices with the same order.\n* @param MatA Input the first Matrix\n* @param MatB Input the second matrix\n*/\nfunction MatSum(MatA, MatB) {\n    let MatSum = new Matrix(MatA.row, MatA.col);\n    for (let j = 0; j < MatA.col; j++) {\n        for (let i = 0; i < MatA.row; i++) {\n            MatSum.data[i][j] = MatA.data[i][j] + MatB.data[i][j];\n        }\n    }\n    return MatSum;\n}\nexports.MatSum = MatSum;\n/**\n* Subtracts two matrices with the same order.\n* @param MatA Input the first Matrix\n* @param MatB Input the second matrix\n*/\nfunction MatSubtr(MatA, MatB) {\n    let MatSubtr = new Matrix(MatA.row, MatA.col);\n    for (let j = 0; j < MatA.col; j++) {\n        for (let i = 0; i < MatA.row; i++) {\n            MatSubtr.data[i][j] = MatA.data[i][j] - MatB.data[i][j];\n        }\n    }\n    return MatSubtr;\n}\nexports.MatSubtr = MatSubtr;\n/**\n* Subtracts two arrays with the same length.\n* @param ArrayA Input the first Array.\n* @param ArrayB Input the second Array.\n*/\nfunction ArraySubtr(ArrayA, ArrayB) {\n    let ArraySubtr = new Array(ArrayA.length);\n    for (let j = 0; j < ArraySubtr.length; j++) {\n        ArraySubtr[j] = ArrayA[j] - ArrayB[j];\n    }\n    return ArraySubtr;\n}\nexports.ArraySubtr = ArraySubtr;\n/**\n* Creates a matrix identity with a given order.\n* @param order Input order of the matrix.\n*/\nfunction MatIdentity(order) {\n    let MatIdentity = new Matrix(order, order);\n    for (let j = 0; j < order; j++) {\n        for (let i = 0; i < order; i++) {\n            if (i == j) {\n                MatIdentity.data[i][j] = 1;\n            }\n            else {\n                MatIdentity.data[i][j] = 0;\n            }\n        }\n    }\n    return MatIdentity;\n}\nexports.MatIdentity = MatIdentity;\n/**\n* Calculates linear system using Gaussian elimination.\n* @param A Input the matrix of coefficients.\n* @param b Input the vector with results\n*/\nfunction GaussEli(A, b) {\n    let x = new Array(A.row);\n    let M = new Matrix(A.row, A.col);\n    for (let j = 0; j < A.col; j++) {\n        for (let i = j + 1; i < A.col + 1; i++) {\n            M.data[i][j] = A.data[i][j] / A.data[j][j];\n            for (let k = j + 1; k < A.col + 1; k++) {\n                A.data[i][k] = A.data[i][k] - M.data[i][j] * A.data[j][k];\n            }\n            b[i] = b[i] - M.data[i][j] * b[j];\n        }\n    }\n    return x;\n}\nexports.GaussEli = GaussEli;\n/**\n *\tThis function uses Gauss-Jordan elimination to invert matrices.\n *\t@param M Matrix to be inverted\n */\nfunction inv(M) {\n    let M_inv = new Matrix(M.row, M.col);\n    let M_aug = augmentedMatrix(M);\n    let repeatFlag = false;\n    for (let i = 0; i < M_aug.row; i++) {\n        if (repeatFlag == true) {\n            i = i - 1;\n            repeatFlag = false;\n        }\n        if (M_aug.data[i][i] == 0) {\n            if (i + 1 < M_aug.row) {\n                M_aug = swapRow(M_aug, i, i + 1);\n                repeatFlag = true;\n            }\n            else {\n                throw new Error('This matrix is not inverteble');\n            }\n        }\n        else {\n            M_aug.data[i] = multiplyRowByConstant(M_aug.data[i], (1 / M_aug.data[i][i]));\n        }\n        for (let k = 0; k < M_aug.row; k++) {\n            if (k !== i) {\n                M_aug.data[k] = ArraySubtr(M_aug.data[k], multiplyRowByConstant(M_aug.data[i], M_aug.data[k][i]));\n            }\n        }\n    }\n    for (let j = M.col; j < M_aug.col; j++) {\n        for (let i = 0; i < M_aug.row; i++) {\n            M_inv.data[i][j - M.col] = M_aug.data[i][j];\n        }\n    }\n    return M_inv;\n}\nexports.inv = inv;\n/**\n* Copy the values of a matrix to another\n* @param Mto input the matrix that you want the values be copied to\n* @param Mfrom input the matrix that you want the vvalues to be copied from\n*/\nfunction copyMatrix(Mto, Mfrom) {\n    for (let j = 0; j < Mfrom.col; j++) {\n        for (let i = 0; i < Mfrom.row; i++) {\n            Mto.data[i][j] = Mfrom.data[i][j];\n        }\n    }\n    return Mto;\n}\nexports.copyMatrix = copyMatrix;\n/**\n* Creates the augmented matrix to use in matrix inversion.\n* @param M Insert the matrix to be used in the augmented matrix.\n*/\nfunction augmentedMatrix(M) {\n    let augmentedMatrix = new Matrix(M.row, M.col + M.col);\n    let identity = MatIdentity(M.row);\n    for (let j = 0; j < M.col; j++) {\n        for (let i = 0; i < augmentedMatrix.row; i++) {\n            augmentedMatrix.data[i][j] = M.data[i][j];\n        }\n    }\n    for (let j = M.col; j < augmentedMatrix.col; j++) {\n        for (let i = 0; i < augmentedMatrix.row; i++) {\n            augmentedMatrix.data[i][j] = identity.data[i][j - M.col];\n        }\n    }\n    return augmentedMatrix;\n}\nexports.augmentedMatrix = augmentedMatrix;\n/**\n* This function swaps two chosen rows in a given matrix\n* @param M choose the Matrix that rows will be swaped.\n* @param row1 define row1 to be swaped\n* @param row2 define second row to be swaped with the first\n*/\nfunction swapRow(M, row1, row2) {\n    //ERROR CHECKER if either input rows are negative or higher value than input Matrix.\n    if (((row1 < 0) || (row2 < 0))) {\n        throw new Error('Number of rows specified out of limits');\n    }\n    if ((row1 >= M.row) || (row2 >= M.row)) {\n        throw new Error('Number of rows specified out of limits');\n    }\n    //End of ERROR CHECKER\n    let swapMatrix = new Matrix(M.row, M.col);\n    copyMatrix(swapMatrix, M);\n    let saveRow = new Array(M.col);\n    for (let j = 0; j < M.col; j++) {\n        saveRow[j] = swapMatrix.data[row1][j];\n    }\n    for (let j = 0; j < M.col; j++) {\n        swapMatrix.data[row1][j] = swapMatrix.data[row2][j];\n    }\n    for (let j = 0; j < M.col; j++) {\n        swapMatrix.data[row2][j] = saveRow[j];\n    }\n    return swapMatrix;\n}\nexports.swapRow = swapRow;\n/**\n* This function multiplay a given array by a constant number\n* @param Row define the row that will be multiplied by a constant\n* @param constat define the constant that will multiply the row. For a division, just insert 1/constant.\n*/\nfunction multiplyRowByConstant(Row, constant) {\n    let multipliedArray = new Array(Row.length);\n    for (let j = 0; j < Row.length; j++) {\n        multipliedArray[j] = constant * Row[j];\n    }\n    return multipliedArray;\n}\nexports.multiplyRowByConstant = multiplyRowByConstant;\n//# sourceMappingURL=matrix-ts.js.map\n\n//# sourceURL=webpack:///./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js?");

/***/ })

/******/ });